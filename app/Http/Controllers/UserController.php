<?php

namespace App\Http\Controllers;

use Auth;
use File;
use Session;
use App\Models\NOC;
use App\Models\Plan;
use App\Models\User;
use App\Models\Order;
use App\Models\Branch;
use App\Models\Region;
use App\Models\Utility;
use App\Models\Employee;
use App\Models\UserToDo;
use App\Models\CustomField;
use App\Models\SavedFilter;
use App\Models\UserCompany;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models\JoiningLetter;
use App\Models\CompanyPermission;
use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Role;
use App\Mail\AutoGeneratedPassword;
use App\Models\GenerateOfferLetter;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use App\Models\ExperienceCertificate;
use App\Models\Notification;
use App\Models\DealTask;
use App\Models\Deal;
use App\Models\Lead;
use App\Models\DealApplication;


class UserController extends Controller
{

    public function index()
    {
        $user = \Auth::user();

        $num_results_on_page = env("RESULTS_ON_PAGE");

        if (isset($_GET['page'])) {
            $page = $_GET['page'];
            $num_results_on_page = isset($_GET['num_results_on_page']) ? $_GET['num_results_on_page'] : $num_results_on_page;
            $start = ($page - 1) * $num_results_on_page;
        } else {
            $num_results_on_page = isset($_GET['num_results_on_page']) ? $_GET['num_results_on_page'] : $num_results_on_page;
            $start = 0;
        }
        if (\Auth::user()->can('manage user')) {

            $user_query = User::select(['users.id','users.name', 'users.website_link', 'project_director.name as project_director','users.email'])
                         ->where('users.type', 'company')
                         ->leftjoin('users as project_director', 'project_director.id', '=', 'users.project_director_id');

            if (\Auth::user()->type != 'super admin' && \Auth::user()->type != 'Admin Team' && \Auth::user()->type != 'HR') {
                $companies = FiltersBrands();
                $brand_ids = array_keys($companies);
                $user_query->whereIn('users.id', $brand_ids);
            }


            if(isset($_GET['search']) && !empty($_GET['search'])){
                $g_search = $_GET['search'];
                $user_query->where(function ($query) use ($g_search) {
                    $query->where('users.name', 'like', '%' . $g_search . '%')
                        ->orWhere('users.website_link', 'like', '%' . $g_search . '%')
                        ->orWhere('project_director.name', 'like', '%' . $g_search . '%');
                });
            }


            if(isset($_GET['Brand']) && !empty($_GET['Brand'])){
                $user_query->where('users.id', $_GET['Brand']);
            }

            if(isset($_GET['Director']) && !empty($_GET['Director'])){
                $user_query->where('users.project_director_id', $_GET['Director']);
            }








            $total_records = $user_query->count();
            $users = $user_query->orderBy('users.name', 'ASC')
                ->paginate($num_results_on_page);

            // $brand_data = [];
            // foreach ($users as $brand) {
            //     $found = false;
            //     $director = '';

            //     if(!isset($_GET['Brand'])){
            //         $found = true;
            //     }

            //     $companyPermissions = CompanyPermission::query()
            //         ->select('users.*')
            //         ->join('users', 'company_permission.user_id', '=', 'users.id')
            //         ->where('company_permission.permitted_company_id', $brand->id)
            //         ->where('company_permission.active', 'true')
            //         ->where('users.type', 'Project Director')
            //         ->first();
            //     if (isset($companyPermissions->name)) {
            //         $director = $companyPermissions->name;
            //     }

            //     if(isset($_GET['Director']) && !empty($_GET['Director']) && isset($companyPermissions) && $companyPermissions->id == $_GET['Director']){
            //         $found = true;
            //     }

            //     if (isset($_GET['search']) && !empty($_GET['search'])) {
            //         $g_search = $_GET['search'];
            //         // $director = \App\Models\CompanyPermission::join('users as director', 'company_permission.user_id', '=', 'director.id')
            //         //             ->where('permitted_company_id', $brand->id)
            //         //             ->where('active', 'true')
            //         //             ->where('director.name', 'like', '%'.$g_search.'%')
            //         //             ->get();

            //         $companyPermissions = CompanyPermission::query()
            //             ->select('users.*')
            //             ->join('users', 'company_permission.user_id', '=', 'users.id')
            //             ->where('company_permission.permitted_company_id', $brand->id)
            //             ->where('company_permission.active', 'true')
            //             ->where('users.name', 'like', '%' . $g_search . '%')
            //             ->first();




            //         if (str_contains($brand->name, $g_search) || str_contains($brand->website_link, $g_search) || isset($companyPermissions->name)) {
            //             $found = true;
            //             $director = $companyPermissions->name ?? '';
            //         } else {
            //             $found = false;
            //         }

            //         // if($brand->id == 3254){
            //         //     dd($director);
            //         //     dd((isset($director->brand_id) && $director->brand_id == $brand->id));
            //         // }
            //     }




            //     if ($found) {

            //         $brand_data[] = json_decode(json_encode([
            //             'id' => $brand->id,
            //             'name' => $brand->name,
            //             'website_link' => $brand->website_link,
            //             'director' => $director
            //         ]));
            //     }
            // }

            $projectDirectors = allUsers();
            $Brands = User::where('type', 'company')->pluck('name', 'id')->toArray();
            $ProjectDirector = User::where('type', 'Project Director')->pluck('name', 'id')->toArray();


            if (isset($_GET['ajaxCall']) && $_GET['ajaxCall'] == 'true') {
                $html = view('user.brandsAjax', compact('total_records', 'projectDirectors', 'Brands', 'ProjectDirector'))->with('users', $users)->render();
                $pagination_html = view('layouts.pagination', [
                    'total_pages' => $total_records,
                    'num_results_on_page' => 25,
                ])->render();

                return json_encode([
                    'status' => 'success',
                    'html' => $html,
                    'pagination_html' => $pagination_html
                ]);
            } else {
                return view('user.index', compact('total_records', 'projectDirectors', 'Brands', 'ProjectDirector'))->with('users', $users);
            }
        } else {
            return redirect()->back();
        }
    }

    public function create()
    {
        if (\Auth::user()->can('create user')) {
            $autoGeneratedPassword = Str::random(8);
            $projectDirectors = User::where('type', 'Project Director')->pluck('name', 'id')->toArray();
            $projectDirectors = ['0' => 'Select Project Director'] + $projectDirectors;
            return view('user.create', compact('autoGeneratedPassword', 'projectDirectors'));
        } else {
            return redirect()->back();
        }
    }


    function generateUniqueEmail()
    {
        do {
            // Generate a unique email
            $uniqueEmail = Str::random(10) . '@example.com';

            // Check if the email already exists in the user table
            $existingUser = User::where('email', $uniqueEmail)->first();
        } while ($existingUser);

        return $uniqueEmail;
    }

    public function store(Request $request)
    {
        //dd($request->input());
        if (\Auth::user()->can('create user')) {

            $default_language = DB::table('settings')->select('value')->where('name', 'default_language')->first();
            $validator = \Validator::make(
                $request->all(),
                [
                    'name' => 'required|max:120',
                    //'domain_link' => 'required',
                    'website_link' => 'required',
                    'drive_link' => 'required'
                ]
            );
            if ($validator->fails()) {
                $messages = $validator->getMessageBag();
                return json_encode([
                    'status' => 'error',
                    'msg' => $messages->first()
                ]);
                // return redirect()->back()->with('error', $messages->first());
            }


            $psw = '1234';

            $user               = new User();
            $user['name']       = $request->name;
            $user['email']      = $this->generateUniqueEmail();
            $user['password']   = Hash::make('1234');
            $user['type']       =  $request->role;
            $user['default_pipeline'] = 1;
            $user['plan'] = 1;
            $user['lang']       = !empty($default_language) ? $default_language->value : '';
            $user['created_by'] = \Auth::user()->creatorId();
            $user['plan']       = Plan::first()->id;
            $user['domain_link'] = $request->domain_link;
            $user['website_link'] = $request->website_link;
            $user['drive_link'] = $request->drive_link;
            $user['email'] = $request->email;
            $user['project_director_id'] = $request->project_director;

            $user->save();

            $role_r = Role::findByName($request->role);
            $user->assignRole($role_r);
            //                $user->userDefaultData();
            $user->userDefaultDataRegister($user->id);
            $user->userWarehouseRegister($user->id);

            //default bank account for new company
            $user->userDefaultBankAccount($user->id);

            Utility::chartOfAccountTypeData($user->id);
            Utility::chartOfAccountData($user);
            // default chart of account for new company
            Utility::chartOfAccountData1($user->id);

            Utility::pipeline_lead_deal_Stage($user->id);
            Utility::project_task_stages($user->id);
            Utility::labels($user->id);
            Utility::sources($user->id);
            Utility::jobStage($user->id);
            GenerateOfferLetter::defaultOfferLetterRegister($user->id);
            ExperienceCertificate::defaultExpCertificatRegister($user->id);
            JoiningLetter::defaultJoiningLetterRegister($user->id);
            NOC::defaultNocCertificateRegister($user->id);

            $p_dir = User::where('type', 'Project Director')->first();
            $new_permission = new \App\Models\CompanyPermission();
            $new_permission->user_id = $p_dir->id;
            $new_permission->permitted_company_id = $user->id;
            $new_permission->active = 'false';
            $new_permission->created_by = \Auth::user()->id;
            $new_permission->save();


            $p_dir = User::where('type', 'Project Director')->first();
            $new_permission = new \App\Models\CompanyPermission();
            $new_permission->user_id = $p_dir->id;
            $new_permission->permitted_company_id = $user->id;
            $new_permission->active = 'false';
            $new_permission->created_by = \Auth::user()->id;
            $new_permission->save();


            // Send Email
            $setings = Utility::settings();
            if ($setings['new_user'] == 1) {
                $user->password = $psw;
                $user->type = $role_r->name;

                $userArr = [
                    'email' => $user->email,
                    'password' => $user->password,
                ];
                $resp = Utility::sendEmailTemplate('new_user', [$user->id => $user->email], $userArr);


                return json_encode([
                    'status' => 'success',
                    'id' => $user->id,
                    'msg' =>  __('Brand created successfully')
                ]);

                // return redirect()->route('users.index')->with('success', __('User successfully created.') . ((!empty($resp) && $resp['is_success'] == false && !empty($resp['error'])) ? '<br> <span class="text-danger">' . $resp['error'] . '</span>' : ''));
            }

            return json_encode([
                'status' => 'success',
                'id' => $user->id,
                'msg' =>  __('Brand created successfully')
            ]);
            // return redirect()->route('users.index')->with('success', __('User successfully created.'));
        } else {
            // return redirect()->back();
            return json_encode([
                'status' => 'error',
                'msg' =>  __('Permission Denied')
            ]);
        }
    }

    public function edit($id)
    {

        if (\Auth::user()->can('edit user')) {
            $user              = User::findOrFail($id);
            $projectDirectors = User::where('type', 'Project Director')->pluck('name', 'id')->toArray();
            $projectDirectors = ['0' => 'Select Project Director'] + $projectDirectors;
            return view('user.edit', compact('user', 'projectDirectors'));
        } else {
            return redirect()->back();
        }
    }


    public function update(Request $request, $id)
    {
        if (\Auth::user()->can('edit user')) {
            $validator = \Validator::make(
                $request->all(),
                [
                    'name' => 'required|max:120',
                    //'domain_link' => 'required',
                    'website_link' => 'required',
                    'drive_link' => 'required'
                ]
            );
            if ($validator->fails()) {
                $messages = $validator->getMessageBag();
                return json_encode([
                    'status' => 'error',
                    'msg' => $messages->first()
                ]);
                //return redirect()->back()->with('error', $messages->first());
            }

            $user = User::findOrFail($id);
            $user->name = $request->name;
            $user->website_link = $request->website_link;
            $user->email = $request->email;
            $user->drive_link = $request->drive_link;
            $user->save();
            return json_encode([
                'status' => 'success',
                'id' => $user->id,
                'msg' => 'Brand updated successfully.'
            ]);
        } else {
            return json_encode([
                'status' => 'error',
                'msg' => 'Permission Denied'
            ]);
            // return redirect()->back();
        }
    }


    public function destroy($id)
    {

        if (\Auth::user()->can('delete user')) {
            $user = User::find($id);
            if ($user) {
                $user->delete();

                // if (\Auth::user()->type == 'super admin') {
                //     if ($user->delete_status == 0) {
                //         $user->delete_status = 1;
                //     } else {
                //         $user->delete_status = 0;
                //     }
                //     $user->save();
                // }
                // if (\Auth::user()->type == 'company') {
                //     $employee = Employee::where(['user_id' => $user->id])->delete();
                //     if ($employee) {
                //         $delete_user = User::where(['id' => $user->id])->delete();
                //         if ($delete_user) {
                //             return redirect()->route('users.index')->with('success', __('User successfully deleted .'));
                //         } else {
                //             return redirect()->back()->with('error', __('Something is wrong.'));
                //         }
                //     } else {
                //         return redirect()->back()->with('error', __('Something is wrong.'));
                //     }
                // }

                return back()->with('success', __('User successfully deleted .'));
            } else {
                return redirect()->back()->with('error', __('Something is wrong.'));
            }
        } else {
            return redirect()->back();
        }
    }

    public function profile()
    {
        $userDetail              = \Auth::user();
        $userDetail->customField = CustomField::getData($userDetail, 'user');
        $customFields            = CustomField::where('created_by', '=', \Auth::user()->creatorId())->where('module', '=', 'user')->get();

        return view('user.profile', compact('userDetail', 'customFields'));
    }

    public function editprofile(Request $request)
    {
        $userDetail = \Auth::user();
        $user       = User::findOrFail($userDetail['id']);
        $this->validate(
            $request,
            [
                'name' => 'required|max:120',
                'email' => 'required|email|unique:users,email,' . $userDetail['id'],
            ]
        );
        if ($request->hasFile('profile')) {
            $filenameWithExt = $request->file('profile')->getClientOriginalName();
            $filename        = pathinfo($filenameWithExt, PATHINFO_FILENAME);
            $extension       = $request->file('profile')->getClientOriginalExtension();
            $fileNameToStore = $filename . '_' . time() . '.' . $extension;

            $settings = Utility::getStorageSetting();
            if ($settings['storage_setting'] == 'local') {
                $dir        = '/uploads/avatar/';
                // $dir        = 'storage/';
            } else {
                $dir        = 'uploads/avatar/';
            }

            $image_path = $dir . $userDetail['avatar'];

            if (File::exists($image_path)) {
                File::delete($image_path);
            }


            $url = '';
            $path = Utility::upload_file($request, 'profile', $fileNameToStore, $dir, []);

            if ($path['flag'] == 1) {
                $url = $path['url'];
            } else {
                return redirect()->route('profile', \Auth::user()->id)->with('error', __($path['msg']));
            }

            //            $dir        = storage_path('uploads/avatar/');
            //            $image_path = $dir . $userDetail['avatar'];
            //
            //            if(File::exists($image_path))
            //            {
            //                File::delete($image_path);
            //            }
            //
            //            if(!file_exists($dir))
            //            {
            //                mkdir($dir, 0777, true);
            //            }
            //            $path = $request->file('profile')->storeAs('uploads/avatar/', $fileNameToStore);

        }

        if (!empty($request->profile)) {
            $user['avatar'] = $fileNameToStore;
        }
        $user['name']  = $request['name'];
        $user['email'] = $request['email'];
        $user->save();
        CustomField::saveData($user, $request->customField);

        return redirect()->route('crm.dashboard')->with(
            'success',
            'Profile successfully updated.'
        );
    }

    public function updatePassword(Request $request)
    {

        if (Auth::Check()) {
            $request->validate(
                [
                    'old_password' => 'required',
                    'password' => 'required|min:6',
                    'password_confirmation' => 'required|same:password',
                ]
            );
            $objUser          = Auth::user();
            $request_data     = $request->All();
            $current_password = $objUser->password;
            if (Hash::check($request_data['old_password'], $current_password)) {
                $user_id            = Auth::User()->id;
                $obj_user           = User::find($user_id);
                $obj_user->password = Hash::make($request_data['password']);;
                $obj_user->save();

                return redirect()->route('profile', $objUser->id)->with('success', __('Password successfully updated.'));
            } else {
                return redirect()->route('profile', $objUser->id)->with('error', __('Please enter correct current password.'));
            }
        } else {
            return redirect()->route('profile', \Auth::user()->id)->with('error', __('Something is wrong.'));
        }
    }
    // User To do module
    public function todo_store(Request $request)
    {
        $request->validate(
            ['title' => 'required|max:120']
        );

        $post            = $request->all();
        $post['user_id'] = Auth::user()->id;
        $todo            = UserToDo::create($post);


        $todo->updateUrl = route(
            'todo.update',
            [
                $todo->id,
            ]
        );
        $todo->deleteUrl = route(
            'todo.destroy',
            [
                $todo->id,
            ]
        );

        return $todo->toJson();
    }

    public function todo_update($todo_id)
    {
        $user_todo = UserToDo::find($todo_id);
        if ($user_todo->is_complete == 0) {
            $user_todo->is_complete = 1;
        } else {
            $user_todo->is_complete = 0;
        }
        $user_todo->save();
        return $user_todo->toJson();
    }

    public function todo_destroy($id)
    {
        $todo = UserToDo::find($id);
        $todo->delete();

        return true;
    }

    // change mode 'dark or light'
    public function changeMode()
    {
        $usr = \Auth::user();
        if ($usr->mode == 'light') {
            $usr->mode      = 'dark';
            $usr->dark_mode = 1;
        } else {
            $usr->mode      = 'light';
            $usr->dark_mode = 0;
        }
        $usr->save();

        return redirect()->back();
    }

    public function upgradePlan($user_id)
    {
        $user = User::find($user_id);
        $plans = Plan::get();
        return view('user.plan', compact('user', 'plans'));
    }
    public function activePlan($user_id, $plan_id)
    {

        $user       = User::find($user_id);
        $assignPlan = $user->assignPlan($plan_id);
        $plan       = Plan::find($plan_id);
        if ($assignPlan['is_success'] == true && !empty($plan)) {
            $orderID = strtoupper(str_replace('.', '', uniqid('', true)));
            Order::create(
                [
                    'order_id' => $orderID,
                    'name' => null,
                    'card_number' => null,
                    'card_exp_month' => null,
                    'card_exp_year' => null,
                    'plan_name' => $plan->name,
                    'plan_id' => $plan->id,
                    'price' => $plan->price,
                    'price_currency' => isset(\Auth::user()->planPrice()['currency']) ? \Auth::user()->planPrice()['currency'] : '',
                    'txn_id' => '',
                    'payment_status' => 'succeeded',
                    'receipt' => null,
                    'user_id' => $user->id,
                ]
            );

            return redirect()->back()->with('success', 'Plan successfully upgraded.');
        } else {
            return redirect()->back()->with('error', 'Plan fail to upgrade.');
        }
    }

    public function userPassword($id)
    {
        $eId        = \Crypt::decrypt($id);
        $user = User::find($eId);

        return view('user.reset', compact('user'));
    }

    public function userPasswordReset(Request $request, $id)
    {
        $validator = \Validator::make(
            $request->all(),
            [
                'password' => 'required|confirmed|same:password_confirmation',
            ]
        );

        if ($validator->fails()) {
            $messages = $validator->getMessageBag();

            return redirect()->back()->with('error', $messages->first());
        }


        $user                 = User::where('id', $id)->first();
        $user->forceFill([
            'password' => Hash::make($request->password),
        ])->save();

        return redirect()->route('users.index')->with(
            'success',
            'User Password successfully updated.'
        );
    }


    public function userDetail($id)
    {
        $user = User::findOrFail($id);
        $userArr = User::get()->pluck('name', 'id')->toArray();
        $html = view('user.userDetail', compact('user', 'userArr',))->render();
        return json_encode([
            'status' => 'success',
            'html' => $html
        ]);
    }

    public function employees()
    {

        $user = \Auth::user();
        $num_results_on_page = env("RESULTS_ON_PAGE");

        if (isset($_GET['page'])) {
            $page = $_GET['page'];
            $num_results_on_page = isset($_GET['num_results_on_page']) ? $_GET['num_results_on_page'] : $num_results_on_page;
            $start = ($page - 1) * $num_results_on_page;
        } else {
            $num_results_on_page = isset($_GET['num_results_on_page']) ? $_GET['num_results_on_page'] : $num_results_on_page;
            $start = 0;
        }

        if (\Auth::user()->can('manage employee')) {
            $excludedTypes = ['super admin', 'company', 'team', 'client'];
            $usersQuery = User::select('users.*');

            // Apply filters~
            if (!empty($_GET['brand'])) {
                $usersQuery->where('brand_id', $_GET['brand']);
            }
            if (!empty($_GET['region_id'])) {
                $usersQuery->where('region_id', $_GET['region_id']);
            }
            if (!empty($_GET['branch_id'])) {
                $usersQuery->where('branch_id', $_GET['branch_id']);
            }
            if (!empty($_GET['Name'])) {
                $usersQuery->where('name', 'like', '%' . $_GET['Name'] . '%');
            }
            if (!empty($_GET['Designation'])) {
                $usersQuery->where('type', 'like', '%' . $_GET['Designation'] . '%');
            }
            if (!empty($_GET['phone'])) {
                $usersQuery->where('phone', 'like', '%' . $_GET['phone'] . '%');
            }

            $companies = FiltersBrands();
            $brand_ids = array_keys($companies);
            if (\Auth::user()->can('level 1')) {
                // Permissions for level 1
            } elseif (\Auth::user()->type == 'company') {
                $usersQuery->where('brand_id', \Auth::user()->id);
            } elseif (\Auth::user()->can('level 2')) {
                $usersQuery->whereIn('brand_id', $brand_ids);
            } elseif (\Auth::user()->can('level 3') && !empty(\Auth::user()->region_id)) {
                $usersQuery->where('region_id', \Auth::user()->region_id);
            } elseif (\Auth::user()->can('level 4') && !empty(\Auth::user()->branch_id)) {
                $usersQuery->where('branch_id', \Auth::user()->branch_id);
            } else {
                $usersQuery->where('id', \Auth::user()->id);
            }

            // Apply search condition
            if (isset($_GET['search']) && !empty($_GET['search'])) {
                $g_search = $_GET['search'];
                $usersQuery->where(function ($query) use ($g_search) {
                    $query->where('users.name', 'like', '%' . $g_search . '%')
                        ->orWhere('users.email', 'like', '%' . $g_search . '%')
                        ->orWhere('users.type', 'like', '%' . $g_search . '%')
                        ->orWhere('users.phone', 'like', '%' . $g_search . '%')
                        ->orWhere(DB::raw('(SELECT name FROM branches branch WHERE branch.id = users.branch_id)'), 'like', '%' . $g_search . '%')
                        ->orWhere(DB::raw('(SELECT name FROM regions r WHERE r.id = users.region_id)'), 'like', '%' . $g_search . '%')
                        ->orWhere(DB::raw('(SELECT name FROM users brand WHERE brand.id = users.brand_id)'), 'like', '%' . $g_search . '%');
                });
            }

            // Apply exclusion of user types
            $usersQuery->whereNotIn('type', $excludedTypes);

            $users = $usersQuery
                ->skip($start)
                ->take($num_results_on_page)
                ->orderBy('users.name', 'ASC')
                ->paginate($num_results_on_page);



            $brands = User::whereNotIn('type', $excludedTypes)->orderBy('name', 'ASC')->get();
            $brandss = User::where('type', 'company')->orderBy('name', 'ASC')->pluck('name', 'id')->toArray();
            $Regions = Region::orderBy('name', 'ASC')->pluck('name', 'id')->toArray();
            $RegionForLocation = Region::pluck('location', 'id')->toArray();
            $Branchs = Branch::pluck('name', 'id')->toArray();
            $Designations = Role::where('name', '!=', 'super admin')->pluck('name', 'id')->toArray();
            $total_records = $users->total();
            $filter = BrandsRegionsBranches();





            if (isset($_GET['brand']) && count($filter['regions']) == 1) {
                // Fetch regions based on the 'brands' condition and populate the $filter['regions'] variable
                $filter['regions'] = Region::where('brands', $_GET['brand']) // Query regions based on the 'brands' condition
                    ->pluck('name', 'id') // Retrieve specific columns 'name' and 'id'
                    ->prepend('Select Region', '') // Prepend a default option 'Select Region'
                    ->toArray(); // Convert the collection to an associative array
            }


            if (isset($_GET['brand']) && isset($_GET['region_id']) && count($filter['branches']) == 1) {
                // Fetch branches based on the 'brands' condition and populate the $filter['regions'] variable
                $filter['branches'] = Branch::where('brands', $_GET['brand'])->where('region_id', $_GET['region_id']) // Query regions based on the 'brands' condition
                    ->pluck('name', 'id') // Retrieve specific columns 'name' and 'id'
                    ->prepend('Select Branch', '') // Prepend a default option 'Select Region'
                    ->toArray(); // Convert the collection to an associative array
            }

            $saved_filters = SavedFilter::where('created_by', \Auth::user()->id)->where('module', 'employee')->get();


            $data = [
                'total_records' => $total_records,
                'users' => $users,
                'brands' => $brands,
                'Regions' => $Regions,
                'brandss' => $brandss,
                'Branchs' => $Branchs,
                'Designations' => $Designations,
                'filters' => $filter,
                'saved_filters' => $saved_filters
            ];

            if (isset($_GET['ajaxCall']) && $_GET['ajaxCall'] == 'true') {
                $html = view('user.employeeAjax', $data)->render();
                $pagination_html = view('layouts.pagination', [
                    'total_pages' => $total_records,
                    'num_results_on_page' => 25,
                ])->render();
                return json_encode([
                    'status' => 'success',
                    'html' => $html,
                    'pagination_html' => $pagination_html
                ]);
            } else {
                return view('user.employee', $data);
            }
        } else {
            return redirect()->back();
        }
    }



    public function employeeCreate()
    {
        $customFields = CustomField::where('created_by', '=', \Auth::user()->creatorId())->where('module', '=', 'user')->get();
        $user  = \Auth::user();

        if (\Auth::user()->type == 'super admin') {
            $branches = Branch::get()->pluck('name', 'id');
            $companies = FiltersBrands();
            $companies = [0 => 'Select Brand'] + $companies;
        } else {
            $branches = Branch::get()->pluck('name', 'id');
            $branches = [0 => 'Select Branches'] + $branches->toArray();

            $companies = FiltersBrands();
            $companies = [0 => 'Select Brand'] + $companies;
            $regions = Region::pluck('name', 'id')->toArray();
        }


        $roles_start = ['0' => 'Select Role']; // Use an associative array for key-value pairs
        $excludedTypes = ['super admin', 'company', 'team', 'client'];
        $roles_arr = Role::whereNotIn('name', $excludedTypes)->get()->unique('name')->pluck('name', 'name')->toArray(); // Convert to array
        $roles = $roles_start + $roles_arr;

        // Now $roles is an array with the desired structure


        $Region = ['0' => 'Select Region'];


        //function will return all the relevent brands, regions,leads
        $filter = BrandsRegionsBranches();
        $companies = $filter['brands'];
        $Region = $filter['regions'];
        $branches = $filter['branches'];

        if (\Auth::user()->can('create employee')) {
            $autoGeneratedPassword = Str::random(10);
            return view('user.employeeCreate', compact('Region', 'roles', 'customFields', 'branches', 'autoGeneratedPassword', 'companies'));
        } else {
            return json_encode([
                'status' => 'error',
                'message' => 'Permission Denied'
            ]);
        }
    }

    public function employeeStore(Request $request)
    {
        if (\Auth::user()->can('create employee')) {
            $default_language = DB::table('settings')->select('value')->where('name', 'default_language')->first();
            // if (\Auth::user()->type == 'super admin') {
            $validator = \Validator::make(
                $request->all(),
                [
                    'name' => 'required|max:120',
                    'email' => 'required|email|unique:users',
                    'password' => 'required|min:6',
                    //'dob' => 'required',
                    'phone' => 'required'
                ]
            );
            if ($validator->fails()) {
                $messages = $validator->getMessageBag();
                return json_encode([
                    'status' => 'error',
                    'msg' => $messages->first()
                ]);
                //return redirect()->back()->with('error', $messages->first());
            }
            $user               = new User();
            $user['name']       = $request->name;
            $user['email']      = $request->email;
            $psw                = $request->password;
            $user['password']   = Hash::make($request->password);
            $user['type']       =  $request->role;
            $user['branch_id'] = $request->branch_id;
            $user['region_id'] = $request->region_id;
            $user['brand_id'] = isset($request->companies) ? $request->companies : \Auth::user()->brand_id;
            $user['default_pipeline'] = 1;
            $user['plan'] = 1;
            $user['lang']       = !empty($default_language) ? $default_language->value : '';

            $user['created_by'] = $request->companies;
            $user['plan']       = Plan::first()->id;
            $user['date_of_birth'] = $request->dob;
            $user['phone'] = $request->phone;
            $user->save();


            $role_r = Role::findByName($request->role);

            //IF Role is Project Director ya Project Manager
            // IF Role is Region Manager or Branch Manager
            if ($request->role == 'Project Director') {
                User::where('id', $request->companies)->update([
                    'project_director_id' => $user->id
                ]);
            } else if ($request->role == 'Project Manager') {
                User::where('id', $request->companies)->update([
                    'project_manager_id' => $user->id
                ]);
            } else if ($request->role == 'Region Manager') {
                Region::where('id', $request->region_id)->update([
                    'region_manager_id' => $user->id
                ]);
            } else if ($request->role == 'Branch Manager') {
                Branch::where('id', $request->branch_id)->update([
                    'branch_manager_id' => $user->id
                ]);
            }


            $user->assignRole($role_r);
            //                $user->userDefaultData();
            $user->userDefaultDataRegister($user->id);
            $user->userWarehouseRegister($user->id);

            //default bank account for new company
            $user->userDefaultBankAccount($user->id);

            Utility::chartOfAccountTypeData($user->id);
            Utility::chartOfAccountData($user);
            // default chart of account for new company
            Utility::chartOfAccountData1($user->id);

            Utility::pipeline_lead_deal_Stage($user->id);
            Utility::project_task_stages($user->id);
            Utility::labels($user->id);
            Utility::sources($user->id);
            Utility::jobStage($user->id);
            GenerateOfferLetter::defaultOfferLetterRegister($user->id);
            ExperienceCertificate::defaultExpCertificatRegister($user->id);
            JoiningLetter::defaultJoiningLetterRegister($user->id);
            NOC::defaultNocCertificateRegister($user->id);

            // To add entry in employees table
            \App\Models\Utility::employeeDetails($user->id, \Auth::user()->creatorId(), $request);

            // Send Email
            $setings = Utility::settings();


            if ($setings['new_user'] == 1) {

                $user->password = $psw;
                $user->type = $role_r->name;

                $userArr = [
                    'email' => $user->email,
                    'password' => $user->password,
                ];
                $resp = Utility::sendEmailTemplate('new_user', [$user->id => $user->email], $userArr);

                return json_encode([
                    'status' => 'success',
                    'id' => $user->id,
                    'msg' => __('Employee successfully created.')
                ]);
                // return redirect()->route('user.employees')->with('success', __('User successfully created.') . ((!empty($resp) && $resp['is_success'] == false && !empty($resp['error'])) ? '<br> <span class="text-danger">' . $resp['error'] . '</span>' : ''));
            }

            return json_encode([
                'status' => 'success',
                'id' => $user->id,
                'msg' => __('Employee successfully created.')
            ]);

            //return redirect()->route('user.employees')->with('success', __('User successfully created.'));
        } else {
            // return redirect()->back();

            return json_encode([
                'status' => 'error',
                'msg' => 'Permission Denied'
            ]);
        }
    }

    public function employeeEdit($id)
    {

        $user  = \Auth::user();
        if (\Auth::user()->type == 'super admin') {
            $companies = ['' => 'Select Brand'] + User::where('type', 'company')->get()->pluck('name', 'id')->toArray();
        } else {
            $companies = FiltersBrands();
            $brand_ids = array_keys($companies);
            $companies = FiltersBrands();
            $companies[] = 'Select Brand';
            $brand_ids = array_keys($companies);



            $branch_query = Branch::query();

            // foreach ($brand_ids as $brandId) {
            //     $branch_query->orWhereRaw('FIND_IN_SET(?, brands)', [$brandId]);
            // }
            $branches = $branch_query->where('id', $user->branch_id)->pluck('name', 'id');
            $branches = [0 => 'Select Branches'] + $branches->toArray();
        }


        if (\Auth::user()->can('edit employee')) {
            $user              = User::findOrFail($id);
            $user->customField = CustomField::getData($user, 'user');
            $customFields      = CustomField::where('created_by', '=', \Auth::user()->creatorId())->where('module', '=', 'user')->get();

            $excludedTypes = ['super admin', 'company', 'team', 'client'];
            $roles = Role::whereNotIn('name', $excludedTypes)->get()->unique('name')->pluck('name', 'id');
            $Region = Region::where('id', $user->region_id)->get()->pluck('name', 'id')->toArray();
            $branch_query = Branch::query();
            $branches = $branch_query->where('id', $user->branch_id)->pluck('name', 'id');
            $branches = $branches->toArray();
            // $autoGeneratedPassword = Str::random(10);
            $employee = Employee::where('user_id', $user->id)->first();
            // dd($employee);

            $filter = BrandsRegionsBranchesForEdit($user->brand_id, $user->region_id, $user->branch_id);
            $companies = $filter['brands'];
            $Region = $filter['regions'];
            $branches = $filter['branches'];
            $employees = $filter['employees'];

            return view('user.employeeEdit', compact('user', 'employee', 'roles', 'customFields', 'branches', 'companies', 'Region'));
        } else {
            return redirect()->back();
        }
    }

    public function employeeUpdate(Request $request, $id)
    {

        if (\Auth::user()->can('edit employee')) {
            if (\Auth::user()->type == 'super admin') {
                $user = User::findOrFail($id);
                $validator = \Validator::make(
                    $request->all(),
                    [
                        'name' => 'required|max:120',
                        'email' => 'required|email|unique:users,email,' . $id,
                    ]
                );
                if ($validator->fails()) {
                    $messages = $validator->getMessageBag();
                    return json_encode([
                        'status' => 'error',
                        'msg' => $messages->first()
                    ]);
                    // return redirect()->back()->with('error', $messages->first());
                }


                $role = Role::findByName($request->role);
                //$role = Role::findByName('company');
                $input         = $request->all();
                $input['type'] = $role->name;
                $user->fill($input)->save();
                $user->branch_id = $request->branch_id;
                $user->date_of_birth =  $request->dob;
                $user->phone = $request->phone;
                //$user->branch_id = $request->branch_id;
                $user['region_id'] = $request->region_id;
                $user->type = $role->name;
                $user->brand_id = isset($request->companies) ? $request->companies : \Auth::user()->brand_id;
                $user->update();

                //  $user['brand_id'] = isset($request->companies) ? $request->companies : \Auth::user()->brand_id;
                if ($request->role == 'Project Director') {
                    User::where('id', $request->companies)->update([
                        'project_director_id' => $user->id
                    ]);
                } else if ($request->role == 'Project Manager') {
                    User::where('id', $request->companies)->update([
                        'project_manager_id' => $user->id
                    ]);
                } else if ($request->role == 'Region Manager') {
                    Region::where('id', $request->region_id)->update([
                        'region_manager_id' => $user->id
                    ]);
                } else if ($request->role == 'Branch Manager') {
                    Branch::where('id', $request->branch_id)->update([
                        'branch_manager_id' => $user->id
                    ]);
                }

                CustomField::saveData($user, $request->customField);

                $roles[] = $role->id;
                $user->roles()->sync($roles);
                Utility::employeeDetailsUpdate($user->id, \Auth::user()->creatorId(), $request);

                return json_encode([
                    'status' => 'success',
                    'id' => $user->id,
                    'msg' => 'Employee updated successfully'
                ]);

                // return redirect()->route('user.employees')->with(
                //     'success',
                //     'User successfully updated.'
                // );
            } else {
                $user = User::findOrFail($id);
                $this->validate(
                    $request,
                    [
                        'name' => 'required|max:120',
                        'email' => 'required|email|unique:users,email,' . $id,
                        'role' => 'required',
                    ]
                );

                $role = Role::findByName($request->role);
                $input         = $request->all();
                $input['type'] = $role->name;

                $user->fill($input)->save();

                $user->branch_id = $request->branch_id;
                $user->date_of_birth =  $request->dob;
                $user->phone = $request->phone;
                //$user->branch_id = $request->branch_id;
                $user->region_id = $request->region_id;
                $user->type = $role->name;
                $user->update();

                if ($request->role == 'Project Director') {
                    User::where('id', $request->companies)->update([
                        'project_director_id' => $user->id
                    ]);
                } else if ($request->role == 'Project Manager') {
                    User::where('id', $request->companies)->update([
                        'project_manager_id' => $user->id
                    ]);
                } else if ($request->role == 'Region Manager') {
                    Region::where('id', $request->region_id)->update([
                        'region_manager_id' => $user->id
                    ]);
                } else if ($request->role == 'Branch Manager') {
                    Branch::where('id', $request->branch_id)->update([
                        'branch_manager_id' => $user->id
                    ]);
                }


                Utility::employeeDetailsUpdate($user->id, \Auth::user()->creatorId(), $request);
                CustomField::saveData($user, $request->customField);

                $roles[] = $role->id;
                $user->roles()->sync($roles);

                return json_encode([
                    'status' => 'success',
                    'id' => $user->id,
                    'msg' => 'Employee updated successfully'
                ]);

                // return redirect()->route('user.employees')->with(
                //     'success',
                //     'User successfully updated.'
                // );
            }
        } else {
            return json_encode([
                'status' => 'error',
                'msg' => 'Permisssion Denied'
            ]);
            // return redirect()->back();
        }
    }

    public function employeeShow($id)
    {
        $employee = User::findOrFail($id);
        // $Region = Region::get()->pluck('name', 'id')->toArray();
        //$branches = Branch::pluck('name', 'id')->toArray();
        $allUsers = allUsers();

        $filter = BrandsRegionsBranchesForEdit($employee->brand_id, $employee->region_id, $employee->branch_id);
        $companies = $filter['brands'];
        $regions = $filter['regions'];
        $branches = $filter['branches'];
        //$employees = $filter['employees'];


        $html = view('user.employeeDetail', compact('employee', 'regions', 'branches', 'allUsers'))->render();
        return json_encode([
            'status' => 'success',
            'html' => $html
        ]);
    }

    public function importEmployees()
    {
        return view('user.import_employees');
    }

    public function import(Request $request)
    {
        $request->validate([
            'csv_file' => 'required|mimes:csv,txt'
        ]);


        $file = $request->file('csv_file');
        $csvData = file_get_contents($file);


        $rows = array_map('str_getcsv', explode("\n", $csvData));
        $header = array_shift($rows);

        $data = [];
        foreach ($rows as $row) {

            if (!isset($row[0])) {
                continue;
            }
            $data[] = [
                'Full Name' => $row[0],
                'Role' => $row[1],
                'Brand' => $row[2],
                'Region' => $row[3],
                'Branch' => $row[4],
                'Email' => $row[5],
                'Phone' => $row[6]
            ];
        }





        foreach ($data as $key => $d) {
            $brand = User::where(['name' => $d['Brand'], 'type' => 'company'])->first();

            if (!$brand) {
                echo "<pre>";
                print_r($d);
                die();
            }



            //regions

            $region = Region::where(['brands' => $brand->id, 'name' => $d['Region']])->first();
            $region_id = isset($region->id) ? $region->id : 0;

            if (!$region) {
                echo 'new Region ' . $d['Region'] . '<br>';
                $new_region = new Region();
                $new_region->name = $d['Region'];
                $new_region->location = $d['Region'];
                $new_region->brands = $brand->id;
                $new_region->save();
                $region_id = $new_region->id;
            }


            //Branch
            $branch = Branch::where(['brands' => $brand->id, 'region_id' => $region_id, 'name' => $d['Branch']])->first();
            $branch_id = isset($branch->id) ? $branch->id : 0;
            if (!$branch) {
                echo 'new Branch ' . $d['Branch'] . '<br>';
                $new_branch = new Branch();
                $new_branch->name = $d['Branch'];
                $new_branch->region_id = $region_id;
                $new_branch->brands = $brand->id;
                $new_branch->created_by = \Auth::user()->id;
                $new_branch->save();
                $branch_id = $new_branch->id;
            }


            ////////////////////////////////Creating Employee
            // $is_exist = User::where('email', $d['Email'])->first();
            // if ($is_exist) {
            //     continue;
            // }

            $user = User::where('email', $d['Email'])->first();
            if (!$user) {
                $user   = new User();
            }


            $user['name']       = $d['Full Name'];
            $user['email']      = $d['Email'];
            $psw                = 'study1234';
            $user['type']       =  $d['Role'];
            $user['password']   = Hash::make($psw);
            $user['branch_id'] = $branch_id;
            $user['region_id'] = $region_id;
            $user['brand_id'] =  $brand->id;
            $user['default_pipeline'] = 1;
            $user['plan'] = 1;
            $user['lang']       = 'en';
            $user['created_by'] = \Auth::user()->id;
            $user['phone'] = $d['Phone'];
            $user->save();

            //working on role
            $role_r = Role::findByName($d['Role']);

            if ($d['Role'] == 'Project Director') {
                User::where('id', $brand->id)->update([
                    'project_director_id' => $user->id
                ]);
            } else if ($d['Role'] == 'Project Manager') {
                User::where('id', $brand->id)->update([
                    'project_manager_id' => $user->id
                ]);
            } else if ($d['Role'] == 'Region Manager') {
                Region::where('id', $region_id)->update([
                    'region_manager_id' => $user->id
                ]);
            } else if ($d['Role'] == 'Branch Manager') {
                Branch::where('id', $branch_id)->update([
                    'branch_manager_id' => $user->id
                ]);
            }


            $user->assignRole($role_r);
            //                $user->userDefaultData();
            $user->userDefaultDataRegister($user->id);
            $user->userWarehouseRegister($user->id);

            //default bank account for new company
            $user->userDefaultBankAccount($user->id);

            Utility::chartOfAccountTypeData($user->id);
            Utility::chartOfAccountData($user);
            // default chart of account for new company
            Utility::chartOfAccountData1($user->id);

            Utility::pipeline_lead_deal_Stage($user->id);
            Utility::project_task_stages($user->id);
            Utility::labels($user->id);
            Utility::sources($user->id);
            Utility::jobStage($user->id);
            GenerateOfferLetter::defaultOfferLetterRegister($user->id);
            ExperienceCertificate::defaultExpCertificatRegister($user->id);
            JoiningLetter::defaultJoiningLetterRegister($user->id);
            NOC::defaultNocCertificateRegister($user->id);

            $emp_det = [
                'name' => $d['Full Name'],
                'role' => $d['Role'],
                'companies' => $brand->id,
                'region_id' => $region_id,
                'branch_id' => $branch_id,
                'email' => $d['Email'],
                'password' => Hash::make('study1234'),
                'phone' => $d['Phone'],
                'dob' => '',
                'gender' => '',
                'address' => '',
                'account_holder_name' => '',
                'account_number' => '',
                'bank_name' => '',
                'bank_identifier_code' => '',
                'branch_location' => '',
                'tax_payer_id' => '',
                'salary' => 0
            ];
            $emp_detail = json_decode(json_encode($emp_det));

            // To add entry in employees table
            Utility::employeeDetails($user->id, \Auth::user()->creatorId(), $emp_detail);

            echo "Employee Create " . $key . "<br>";
        }

        die('successfully completed');
    }


    public function deleteBulkUsers(Request $request)
    {

        if (\Auth::user()->can('delete user') || \Auth::user()->type == 'super admin') {

            if ($request->ids != null) {
                User::whereIn('id', explode(',', $request->ids))->delete();
                return redirect()->route('user.index')->with('success', 'Brand deleted successfully');
            } else {
                return redirect()->route('user.index')->with('error', 'Atleast select 1 brand.');
            }
        } else {
            return redirect()->route('user.index')->with('error', __('Permission Denied.'));
        }
    }

    public function deleteBulkEmployees(Request $request)
    {

        if (\Auth::user()->can('delete employee') || \Auth::user()->type == 'super admin') {

            if ($request->ids != null) {
                User::whereIn('id', explode(',', $request->ids))->delete();
                Employee::whereIn('user_id', explode(',', $request->ids))->delete();
                return redirect()->route('user.index')->with('success', 'Employee deleted successfully');
            } else {
                return redirect()->route('user.index')->with('error', 'Atleast select 1 employee.');
            }
        } else {
            return redirect()->route('user.index')->with('error', __('Permission Denied.'));
        }
    }

    public function download()
    {
        $usersQuery = User::select(['users.*']);


        //Filters
        if (!empty($_GET['brand'])) {
            $usersQuery->where('brand_id', $_GET['brand']);
        }
        if (!empty($_GET['region_id'])) {
            $usersQuery->where('region_id', $_GET['region_id']);
        }

        if (!empty($_GET['branch_id'])) {
            $usersQuery->where('branch_id', $_GET['branch_id']);
        }

        if (!empty($_GET['Name'])) {
            $usersQuery->where('name', 'like', '%' . $_GET['Name'] . '%');
        }

        if (!empty($_GET['Designation'])) {
            $usersQuery->where('type', 'like', '%' . $_GET['Designation'] . '%');
        }


        if (!empty($_GET['phone'])) {
            $usersQuery->where('phone', 'like', '%' . $_GET['phone'] . '%');
        }

        $companies = FiltersBrands();
        $brand_ids = array_keys($companies);
        if (\Auth::user()->type == 'super admin' || \Auth::user()->can('level 1')) {
        } else if (\Auth::user()->type == 'company') {
            $usersQuery->where('brand_id', \Auth::user()->id);
        } else if (\Auth::user()->type == 'Project Director' || \Auth::user()->type == 'Project Manager' || \Auth::user()->can('level 2')) {
            $usersQuery->whereIn('brand_id', $brand_ids);
        } else if (\Auth::user()->type == 'Region Manager' || \Auth::user()->can('level 3') && !empty(\Auth::user()->region_id)) {
            $usersQuery->where('region_id', \Auth::user()->region_id);
        } else if (\Auth::user()->type == 'Branch Manager' || \Auth::user()->type == 'Admissions Officer' || \Auth::user()->type == 'Admissions Manager' || \Auth::user()->type == 'Marketing Officer' || \Auth::user()->can('level 4') && !empty(\Auth::user()->branch_id)) {
            $usersQuery->where('branch_id', \Auth::user()->branch_id);
        } else {
            $usersQuery->where('id', \Auth::user()->id);
        }

        $users = $usersQuery
            ->where('type', 'company')
            ->orderBy('users.name', 'ASC')
            ->get();

        $all_users = User::pluck('name', 'id')->toArray();


        //header
        $header = [
            'Sr.No.',
            'Name',
            'Website Link',
            'Project Director'
        ];

        $project_director = \App\Models\User::join('company_permission', 'company_permission.user_id', '=', 'users.id')
            ->where('company_permission.permitted_company_id', $user->id)
            ->first();


        $data = [];
        foreach ($users as $key => $brand) {
            $data[] = [
                'sr_no' => $key + 1,
                'name' => $brand->name,
                'website_link' => $brand->website_link,
                'director' =>  $project_director->name ?? ''
            ];
        }

        downloadCSV($header, $data, 'Brand.csv');
        return true;
    }

    public function downloadEmployees()
    {
        $excludedTypes = ['super admin', 'company', 'team', 'client'];
        $usersQuery = User::select(['users.*'])->whereNotIn('type', $excludedTypes);


        //Filters
        if (!empty($_GET['brand'])) {
            $usersQuery->where('brand_id', $_GET['brand']);
        }
        if (!empty($_GET['region_id'])) {
            $usersQuery->where('region_id', $_GET['region_id']);
        }

        if (!empty($_GET['branch_id'])) {
            $usersQuery->where('branch_id', $_GET['branch_id']);
        }

        if (!empty($_GET['Name'])) {
            $usersQuery->where('name', 'like', '%' . $_GET['Name'] . '%');
        }

        if (!empty($_GET['Designation'])) {
            $usersQuery->where('type', 'like', '%' . $_GET['Designation'] . '%');
        }


        if (!empty($_GET['phone'])) {
            $usersQuery->where('phone', 'like', '%' . $_GET['phone'] . '%');
        }


        // if (\Auth::user()->type == 'super admin') {
        //     $usersQuery = User::whereNotIn('type', $excludedTypes);
        // } else if ($user->type == 'company') {
        //     $usersQuery->where('brand_id', $user->id);
        // } else {
        //     $usersQuery->where('brand_id', $user->brand_id);
        // }

        $companies = FiltersBrands();
        $brand_ids = array_keys($companies);
        if (\Auth::user()->type == 'super admin' || \Auth::user()->can('level 1')) {
        } else if (\Auth::user()->type == 'company') {
            $usersQuery->where('brand_id', \Auth::user()->id);
        } else if (\Auth::user()->type == 'Project Director' || \Auth::user()->type == 'Project Manager' || \Auth::user()->can('level 2')) {
            $usersQuery->whereIn('brand_id', $brand_ids);
        } else if (\Auth::user()->type == 'Regional Manager' || \Auth::user()->can('level 3') && !empty(\Auth::user()->region_id)) {
            $usersQuery->where('region_id', \Auth::user()->region_id);
        } else if (\Auth::user()->type == 'Branch Manager' || \Auth::user()->type == 'Admissions Officer' || \Auth::user()->type == 'Admissions Manager' || \Auth::user()->type == 'Marketing Officer' || \Auth::user()->can('level 4') && !empty(\Auth::user()->branch_id)) {
            $usersQuery->where('branch_id', \Auth::user()->branch_id);
        } else {
            $usersQuery->where('id', \Auth::user()->id);
        }

        $users = $usersQuery
            ->orderBy('users.name', 'ASC')
            ->get();
        $all_users = allUsers();
        $branches = Branch::pluck('name', 'id')->toArray();
        $regions = Region::pluck('name', 'id')->toArray();

        $header = [
            'Sr.No.',
            'Name',
            'Email',
            'Designation',
            'Phone',
            'Brand',
            'Region',
            'Branch'
        ];


        $data = [];
        foreach ($users as $key => $emp) {
            $data[] = [
                'sr' => $key + 1,
                'name' => $emp->name,
                'email' => $emp->email,
                'phone' => $emp->phone,
                'brand' => $all_users[$emp->brand_id] ?? '',
                'region' => $regions[$emp->region_id] ?? '',
                'branch' => $branches[$emp->branch_id] ?? ''
            ];
        }

        downloadCSV($header, $data, 'Employees.csv');
        return true;
    }

    private function notificationFilters()
    {
        $filters = [];
        if (isset($_GET['notification_user']) && !empty($_GET['notification_user'])) {
            $filters['user_id'] = $_GET['notification_user'];
        }
        return $filters;
    }
    public function notifications(Request $request)
    {
        $start = 0;
        $num_results_on_page = env("RESULTS_ON_PAGE");
        if (isset($_GET['page'])) {
            $page = $_GET['page'];
            $num_of_result_per_page = isset($_GET['num_results_on_page']) ? $_GET['num_results_on_page'] : $num_results_on_page;
            $start = ($page - 1) * $num_results_on_page;
        } else {
            $num_results_on_page = isset($_GET['num_results_on_page']) ? $_GET['num_results_on_page'] : $num_results_on_page;
        }
        $filters = $this->notificationFilters();
        $Notify=Notification::with('Notifier')->whereHas('Notifier', function ($query) { $query->whereNotNull('id'); });

        if (\Auth::user()->type != 'super admin') {
            $Notify->where('user_id', \Auth::id());
        }

        if (!empty($request->id)) {
            $id = substr($request->id, 0, -1);
            $result = $Notify->where('id', 'like', "%$id%")->get();
        }

        foreach ($filters as $column => $value) {
            if ($column === 'user_id') {
                $Notify->where('user_id', $value);
            }
        }

        if (isset($_GET['ajaxCall']) && $_GET['ajaxCall'] == 'true' && isset($_GET['search']) && !empty($_GET['search'])) {
            $g_search = $_GET['search'];
            $Notify->whereHas('Notifier', function ($query) use ($g_search) {
                $query->where('name' , 'like', '%' . $g_search . '%');
            });
        }

        $users=Notification::with('Notifier')->select('user_id')->distinct()->whereHas('Notifier', function ($query) { $query->whereNotNull('id'); })->get();


        $total_records = $Notify->count();
        $Notifications = $Notify->skip($start)->take($num_results_on_page)->get();
        $saved_filters = SavedFilter::where('created_by', \Auth::user()->id)->where('module', 'notifications')->get();
        if (isset($_GET['ajaxCall']) && $_GET['ajaxCall'] == 'true') {
            $html = view('notifications.notifications_ajax', compact('Notifications','total_records','users','saved_filters'))->render();

            return json_encode([
                'status' => 'success',
                'html' => $html
            ]);
        }
        return view('notifications.notifications_list', compact('Notifications','total_records','users','saved_filters'));

    }

    public function deleteBulkNotifications(Request $request){
        Notification::whereIn('id', explode(',', $request->ids))->delete();
        return back()->with('success', 'Notifications deleted successfully');
    }

    public function NotificationStatusChange(Request $request)
    {
       if(!empty($request->input('id'))){
        Notification::findorfail($request->input('id'))->update(['is_read'=>'1']);
        return json_encode([
            'status' => 'success',
            'message' => 'Update User Tasks Successfully '
        ]);
       }
    }

    public function getnotificationsDetails()
    {
        $taskId = $_GET['notification_id'];

        $task = Notification::with('Notifier')->whereHas('Notifier', function ($query) { $query->whereNotNull('id'); })->FindOrFail($taskId);

        $html = view('notifications.notifications_details', compact('task'))->render();

        return json_encode([
            'status' => 'success',
            'html' => $html
        ]);
    }

    public function showConvert($id)
    {

        $employee= User::find($id);
        $filter = BrandsRegionsBranchesForEdit($employee->brand_id, $employee->region_id, 0);
        $branches = $filter['branches'];
        $employees = $filter['employees'];
        return view('user.convert', compact('employee','branches','employees'));
    }




//  convertToUser branch and new user
    public function convertToUser(Request $request,$id)
    {
        // Change Branch
        $user = User::find($id);
       if($request->UserTransfer == 0){
        $validator = \Validator::make(
            $request->all(),
            [
                'branch_id' => 'required|integer|min:1',
            ]
        );
        if ($validator->fails()) {
            $messages = $validator->getMessageBag();
            return json_encode([
                'status' => 'error',
                'message' => $messages->first()
            ]);
        }
        
        DB::table('deal_tasks')
            ->where('branch_id', $user->branch_id)
            ->update(['branch_id' => $request->branch_id]);

        DB::table('leads')
            ->where('branch_id', $user->branch_id)
            ->update(['branch_id' => $request->branch_id]);

        DB::table('deals')
            ->where('branch_id', $user->branch_id)
            ->update(['branch_id' => $request->branch_id]);

        DB::table('deal_applications')
            ->join('deals', 'deals.id', '=', 'deal_applications.deal_id')
            ->where('deals.branch_id', $user->branch_id)
            ->update(['deals.branch_id' => $request->branch_id]);

        
       return json_encode([
        'status' => 'success',
        'message' => __('Change Branch successfully!')
       ]);
       }else{
        // User Responsible
        
        $validator = \Validator::make(
            $request->all(),
            [
                'assigned_to' => 'required|integer|min:1',
            ]
        );
        if ($validator->fails()) {
            $messages = $validator->getMessageBag();
            return json_encode([
                'status' => 'error',
                'message' => $messages->first()
            ]);
        }

        DB::table('deal_tasks')
        ->where('assigned_to', $user->id)
        ->update(['assigned_to' => $request->assigned_to]);

        DB::table('leads')
        ->where('user_id', $user->id)
        ->update(['user_id' => $request->assigned_to]);

        DB::table('deals')
        ->where('assigned_to', $user->id)
        ->update(['assigned_to' => $request->assigned_to]);

        DB::table('deal_applications')
        ->join('deals', 'deals.id', '=', 'deal_applications.deal_id')
        ->where('deals.assigned_to', $user->id)
        ->update(['deals.assigned_to' => $request->assigned_to]);

        return json_encode([
            'status' => 'success',
            'message' => __('Change Assigned To successfully!')
           ]);
       }
    }


}
